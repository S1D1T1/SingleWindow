{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww19160\viewh19920\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 SingleWindow for MacOS SwiftUI\
\
SingleWindow creates a window for use with SwiftUI which is persistant - when closed by the user, it is only hidden, and retains its state. you can programmatically - \
 - well, are you sitting down? you can\
 OPEN\
 and\
 CLOSE\
 \
this window.\
 give yourself a minute .. take that in. I'm here if you need to talk.\
\
The window's visible/ hidden state can be toggled with a menu command. The user can also close the window in the usual ways - the close button, or Cmd-W.\
\
I needed it for a control surface used in an App.\
\
It's understandable that SwiftUI's doc / scene model couldn't natively support this behavior, It's a dumb foreign thing on MacOS to have a window that's not a document, but some global state. I mean, the Cmd-0 for iTunes window was so long ago, maybe they forgot how to do that. its code long lost, like the Saturn V plans. Calendar doesn't have a central window you'd want to close, then recall. or Photos. So there's no need for this weird behavior in the 
\f1\i framework which is the future of macos
\f0\i0  development. \
\
SingleWindow hosts a SwiftUI View which you pass when created.\
\

\f2\b \ul The SingleWindow API:
\f0\b0 \ulnone \
\
makeSingleWindow (title: String,\
                external:Bool = false,\
                shortcutString:String? = nil,\
                rect:NSRect = defaultRect,\
                content: @escaping () -> V))\
\
\
did you know what \'93 content: @escaping () -> V\'94  meant, when you first started with Swift? Did you know what that V stood for?\
Apple\'92s Docs team were born knowing it, They didn\'92t need to clutter the Jonny-Ive-sparse docs with samples, like this:\
\
// make a window to host my groovy clock, that\'92s toggled with Command-1\
\
mySingleWindow = makeSingleWindow (title: \'93Groovy Clock\'94, shortcutString:\'941\'94) \{\
				GroovyClockView()\
				\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
// Here\'92s how to put the groovy clock on the external monitor, if possible\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 mySingleWindow = makeSingleWindow (title: \'93Groovy Clock, Stage Left\'94,  external:true, shortcutString:\'941\'94) \{\
				GroovyClockView()\
				\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
some SingleWindow class features:\
\
.isOpen - Boolean property. I use this for conditionally disabling things\
.setWindowTitle() - what it says. \
	its'a window. it has a title bar. I want to SET the WINDOW's TITLE.\
	\
	wtaf is a navigationTitle()"? why not call it window Title? 
\f1\i Why
\f0\i0 , SwiftUI?\
	answer: Enswiftification. (deference to Mr. Doctorow)\
\
\
there's a separate "maker" function which returns the object. \
Do you find that ugly? I do.\
\
I'm not a good enough programmer to consolidate it into the class initializer. given swift's woowoo typing, and the fact that you pass a View. um, you pass *some view*. \
any view?\
AnyView()?\
\
 maybe you can get a consolidated version compiling. You\'92re smarter than me. Most people are. But if you do, don't send a pull request. don't tell me about it. It'll just start the night terrors again.\
\
call SingleWindowMenuList() to install your window\'92s name in the mac menus. SingleWindowMenuList() adds menu items for each of your app\'92s SingleWindow objects.\
You can put those menu items where you want, presumably the "Window" menu. like this:\
\
        CommandGroup(before: .singleWindowList)\{\
            SingleWindowMenuList()\
        \}\
\
menu items are appear as "Show <your Window>" or "Hide <yourWindow>", depending on its state. Like this:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Screenshot 2024-02-24 at 7.46.03â€¯PM.png \width7700 \height5440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
You can attach a command key to the menu item, like Command-0 in Messages or Calendar. I mean if Apple thought there was any need for such behavior in their flagship framework, which they obviously don't. and you definitely can't recall the Calendar or Messages window after closing it. But SwiftUI is still new, give it time. Well it was new 5 years ago. so SwiftUI is as new as an obsolete iPhone.}